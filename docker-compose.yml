version: '3'

services:

# Infrastructure

  router:
    build: ./components/router/
    container_name: router
    volumes:
      - router_data:/opt/pocketsoc-ng/data
    privileged: true
    #cap_add:
    #  - NET_ADMIN
    networks:
      - internal
      - mirror

  reverse-proxy:
    build: ./components/reverse-proxy/
    container_name: reverse-proxy
    environment:
        OPENSEARCH_DASHBOARDS_BASEURL: http://opensearch-dashboards:5601
        MISP_BASEURL: http://misp
        OPENSEARCH_DASHBOARDS_PORT: 8443
        MISP_PORT: 443
        HOST_HOSTNAME: ${HOST_HOSTNAME}
    extra_hosts:
    - "host.docker.internal:host-gateway"
    volumes:
      - certificates:/certs
    ports:
      - 443:443
      - 8443:8443
    networks:
      - mirror


# SOC

## OpenSearch
#     build: ./components/opensearch
#     build: ./components/opensearch
#    build: ./components/opensearch_dashboards

opensearch-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
    image: opensearchproject/opensearch:latest # Specifying the latest available image - modify if you want a specific version
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node1 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    networks:
      - mirror # All of the containers will join the same Docker bridge network
  opensearch-node2:
    image: opensearchproject/opensearch:latest # This should be the same image used for opensearch-node1 to avoid issues
    container_name: opensearch-node2
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node2
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    networks:
      - mirror
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: opensearch-dashboards
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9200","https://opensearch-node2:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
    networks:
      - mirror

## Logstash

  logstash-zeek:
    build: ./components/logstash-zeek
    restart: always
    container_name: logstash-zeek
    environment:
        - ELASTIC_PASSWORD=${ADMIN_PASSWORD}
    ports:
      - 5044:5044
    networks:
      - mirror


# MISP

  mysql:
    image: mariadb:10.7
    restart: always
    container_name: misp-mysql
    tmpfs:
      - /tmp
    volumes:
      - misp_mysql_data:/var/lib/mysql/
    environment:
      MYSQL_DATABASE: misp
      MYSQL_USER: misp
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    networks:
      - mirror

  redis:
    image: redis:6.2
    restart: always
    container_name: misp-redis
    networks:
      mirror:

  misp-modules:
    image: ghcr.io/nukib/misp-modules:latest
    restart: always
    container_name: misp-modules
    cap_drop:
      - NET_RAW
      - SYS_CHROOT
      - MKNOD
      - NET_BIND_SERVICE
      - AUDIT_WRITE
      - SETFCAP
    networks:
      mirror:

  misp:
    build: ./components/misp/
    restart: always
    container_name: misp
    depends_on:
      - mysql
      - redis
    tmpfs:
      - /tmp
    cap_drop:
      - NET_RAW
      - SYS_CHROOT
      - MKNOD
      - AUDIT_WRITE
      - SETFCAP
    volumes:
      - misp_data:/var/www/MISP/app/
    environment:
      MYSQL_HOST: misp-mysql
      MYSQL_LOGIN: misp
      MYSQL_PASSWORD: password # Please change for production
      MYSQL_DATABASE: misp
      REDIS_HOST: misp-redis
      MISP_BASEURL: https://${HOST_HOSTNAME}
      MISP_PASSWORD: "0123456789Aa"
      MISP_UUID: 86186CBF-6940-4354-857D-2C1C93F8FFC0 # PocketSOC use only
      MISP_ORG: PocketSOC # Please change for production
      MISP_MODULE_URL: http://misp-modules
      MISP_EMAIL: null@example.com # Please change for production
      SECURITY_SALT: MpqM8ofrPtedU70wTzDWIs5R6dwqRAZDMKuzJeK5neo= # PocketSOC use only
      ZEROMQ_ENABLED: "yes"
    ports:
      - 8080:80
      - 127.0.0.1:50000:50000
    networks:
      - mirror

## Zeek

  zeek:
    build: ./components/zeek/
    container_name: zeek
    volumes:
      - zeek_data:/opt/pocketsoc-ng/data
    environment:
        ZEEKHOST: ${HOST_HOSTNAME}
    #privileged: true 
    cap_add:
      - NET_ADMIN
    networks:
      - mirror

## "Internal"

## Client

  client:
    build: ./components/client/
    container_name: client
    cap_add:
      - NET_ADMIN
    volumes:
      - certificates:/certs
      - client_data:/opt/pocketsoc-ng/data
    networks:
      - internal
      - mirror

# "External"

## Webserver 

  webserver:
    build: ./components/webserver/
    container_name: webserver
    cap_add:
      - NET_ADMIN
    volumes:
      - webserver_data:/usr/local/apache2/htdocs/
      - certificates:/certs
    networks:
      - internal

### SSHServer
#
#  sshserver:
#    build: ./components/sshserver/
#    container_name: sshserver
#    cap_add:
#      - NET_ADMIN    
#    volumes:
#      - sshserver_data:/opt/pocketsoc-ng/data
#    networks:
#      - internal

volumes:
  opensearch-data1:
  opensearch-data2:
  opensearch-dashboards:
  misp_mysql_data:
  misp_data:
  router_data:
  webserver_data:
  client_data:
  sshserver_data:
  zeek_data:
  certificates:
    external: true

networks:
  internal:
    ipam:
      config:
        - subnet: 172.18.0.0/16
  mirror:
    ipam:
      config:
        - subnet: 172.20.0.0/16
